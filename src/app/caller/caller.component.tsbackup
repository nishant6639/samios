import { Component, OnInit, DoCheck, KeyValueDiffers, KeyValueDiffer } from '@angular/core';
import Peer from 'peerjs';
import { CallService } from '../services/call.service';
import { MiscService } from '../services/misc.service';
import { ApiService } from '../services/api.service';
import { Platform } from '@ionic/angular';
import { FirebaseService } from '../services/firebase.service';
import { BackgroundMode } from '@ionic-native/background-mode/ngx';
import { AngularFireDatabase, AngularFireObject } from '@angular/fire/database';
import { Observable } from 'rxjs';
import { Router, NavigationStart, NavigationEnd, NavigationError, NavigationCancel, RoutesRecognized, ActivatedRoute } from '@angular/router';
import { Insomnia } from '@ionic-native/insomnia/ngx';
import { AudioManagement } from '@ionic-native/audio-management/ngx';
// import { LocalNotifications } from '@ionic-native/local-notifications/ngx';
import { NativeAudio } from '@ionic-native/native-audio/ngx';
declare let cordova: any;
declare let AudioToggle:any;
@Component({
	selector: 'app-caller',
	templateUrl: './caller.component.html',
	styleUrls: ['./caller.component.scss'],
})
export class CallerComponent implements OnInit {

	activeScreen:any = 2;
	comm:any;
	audio_muted:any = 0;
	video_muted:any = 0;
	soundMode:any = 0;
	orderId:any = 0;
	userId:any = 0;
	myUserId:any;
	myStream:any;
	callToEnd:any = null;
	peer:Peer;
	timeIntStarted:any = 0;
	remTime:any = "";
	bookingRequest:any = "";
	chatMsgs:any = [];
	callLog:any = [];
	newChat:any = 0;
	itemRef: AngularFireObject<any>;
	callRef: AngularFireObject<any>;
	chatWin:any = 0;
	message:any = "";
	userDets:any = [];
	order:any;
	other_user:any;
	myScreen:any;
	callStartTime:any;
	callerScreen:any;
	outgoingCall:any;
	outgoingCallData:any;
	incomingCallData:any;
	remoteStream:any;
	callExtended:any = 0;
	callExtendShown:any = 0;
	callExtendRequest:any = 0;
	callExtendRequested:any = 0;
	callStage:any = 0;
	showCancel:any = 0;
	timeInt:any;
	rem_text:any;
	myStreamEn:any = 0;
	remoteStreamEn:any = 0;
	minutes:any;
	seconds:any;
	options:any = {  // not used, by default it'll use peerjs server
		// host: '54.73.63.45',
		// port: 9000,
		// path: '/samanta',
		// secure: false,
		debug: 1,
		config: { 'iceServers': [
			{ 'urls': 'stun:stun.l.google.com:19302' },
			{
				urls: 'turn:numb.viagenie.ca',
				credential: 'muazkh',
				username: 'webrtc@live.com'
			},
		]}
	};
	// differ: KeyValueDiffer<string, any>;
	constructor(private call:CallService,
		private api:ApiService,
		private misc:MiscService,
		private router: Router,
		public audioman: AudioManagement,
    	private backgroundMode: BackgroundMode,
		private firebase:FirebaseService,
		private platform: Platform,
		private nativeAudio: NativeAudio,
		private localNotifications: LocalNotifications,
		private db: AngularFireDatabase, private insomnia: Insomnia) {
		// this.differ = this.differs.find({}).create();
		this.firebase.initProviderBooking(this.showAcceptToast.bind(this));
		this.firebase.initIncoming(this.incomingCall.bind(this));
		this.firebase.initReceiver(this.receiverEnabled.bind(this));
		this.firebase.initReceiveMsg(this.receiveFireMsg.bind(this));
		this.call.initChatData(this.getChatData.bind(this));
		this.call.initCall(this.callInit.bind(this));
	}

	ngOnInit() {
		this.comm = this.call.comm;
		this.myScreen = document.getElementById('myVideo');
		this.myScreen.muted = "true";
		this.callerScreen = document.getElementById('callerVideo');
		this.router.events.forEach((event) => {
	      	if(event instanceof NavigationEnd) {
	        	// this.getUserDetails();
	        	this.userDets = this.misc.getUserDets();
	      	}
	    });
	    this.backgroundMode.enable();
	    this.backgroundMode.on("activate").subscribe(()=>{
	      // console.log('enable');
	    });
	    this.backgroundMode.on("deactivate").subscribe(()=>{
	      // console.log('disable');
	    });
	}



	// ngDoCheck() {
	//   const change = this.differ.diff(this);
	//   if (change) {
	//     change.forEachChangedItem(item => {
	//       // console.log('item changed', item);
	//     });
	//   }
	// }

	// getOrderDets(){
	// 	this.call.userDetailsObs
	// 	.subscribe(res=>{
	// 		// console.log('orrrrrrrrrrrrrrrr'+res);
	// 	});
	// }


	callInit(order_id){
		// alert(order_id);
		this.outGoingCall(order_id);
	}

	listenToPeerErrors(){
		this.peer.on('error', (err) => {
			// console.log(err.type);
			if(err.type == 'peer-unavailable'){
				this.disconnectCall(0);
			}
		});
	}

	outGoingCall(order_id){
		navigator.mediaDevices.getUserMedia({ audio: true, video: true })
		.then(stream => {
			this.myStream = stream;
			// // console.log(this.myStream);
			this.myScreen.srcObject = this.myStream;
			this.myScreen.muted = "true";
			var element1:any = document.getElementsByClassName('call-screen-wrap')[0];
			// .call-screen-wrap
			// element1.style.background = "#000";

			if (this.platform.is('ios')) {
				var element:any = document.getElementsByClassName('ion-page')[0];
				element.style.display = "none";
				var element1:any = document.getElementsByClassName('call-screen-wrap')[0];
				// .call-screen-wrap
				element1.style.background = "transparent";
	            setTimeout(()=>{
					cordova.plugins.iosrtc.refreshVideos();
				}, 500);
	      	}

			var data = {
				'order_id':order_id
			};
			this.callStage = 1; // Caller connecting
			this.api.startCall(data)
			.then(resp => {
				this.insomnia.keepAwake()
			  	.then(
			    	() => // console.log('success'),
			    	() => // console.log('error')
			  	);
				// // console.log(resp);
				if(!(resp.data.end_time == null)){
					this.callToEnd = new Date((resp.data.end_time+" UTC").replace(/-/g, '/')).toISOString();
				}
				this.order = resp.data.order;
				this.other_user = resp.data.user;
				this.myUserId = resp.data.my_user_id;
				this.getChatData();
				// this.getCallLog();
				this.setCallLog(resp.data.my_user_id, 'init_call', new Date());
				if(!(this.peer == undefined)){
					this.peer.destroy();
				}
				this.peer = new Peer('SamantaPJS'+this.myUserId, this.options);
				this.listenToPeerErrors();
				this.peer.on('open', () => {
					// this.wait();
					// // console.log('opened for outgoing');
				});
				setTimeout(() => {
					if(this.callStage == 1){
						this.receiverEnabled();
					}
				}, 30000);
			})
			.catch( err => {
				// // console.log(err);
			});
		})
		.catch(error => {
			// // console.log(error);
			// this.handleError(error);
		});

	}

	incomingCall(data){
		var element1:any = document.getElementsByClassName('call-screen-wrap')[0];
		// .call-screen-wrap
		// element1.style.background = "#000";
		// this.backgroundMode.moveToForeground();
		// // console.log(data);
		this.order = data.order;
		this.other_user = data.user;
		this.myUserId = data.my_user_id;
		this.getChatData();
		// this.getCallLog();
		if(!(this.peer == undefined)){
			this.peer.destroy();
		}
		this.peer = new Peer('SamantaPJS'+this.myUserId, this.options);
		this.listenToPeerErrors();
		this.peer.on('open', () => {
			this.waitForCall();
			
			var dataSend = {
				'user_id': this.other_user.id,
				'order_id': this.order.id
			};

			this.api.receiverEnabled(dataSend)
			.then( resp => {
				this.insomnia.keepAwake()
			  	.then(
				    () => // console.log('success'),
				    () => // console.log('error')
			  	);
				if(!(resp.data.end_time == null)){
					this.callToEnd = new Date((resp.data.end_time+" UTC").replace(/-/g, '/')).toISOString();
				}
			})
			.catch(err => {
				// // console.log(err);
			});
		});
		// // console.log('peer');
	}

	waitForCall(){

		this.peer.on('call', (call) => {
			this.nativeAudio.loop('ringtone')
			.then(onSuccess => {}, onError => {});
			// this.inCall = 1;
			// // console.log('oncominffffff');
			navigator.mediaDevices.getUserMedia({ audio: true, video: true })
			.then(stream => {
				this.myStream = stream;
				this.myScreen.srcObject = this.myStream;
				this.myScreen.muted = "true";
				if (this.platform.is('ios')) {
					var element:any = document.getElementsByClassName('ion-page')[0];
					element.style.display = "none";
					var element1:any = document.getElementsByClassName('call-screen-wrap')[0];
					// .call-screen-wrap
					element1.style.background = "transparent";
		            setTimeout(()=>{
						cordova.plugins.iosrtc.refreshVideos();
					}, 500);
		      	}
				this.callStage = 2;
				
				this.incomingCallData = call;

				this.incomingCallData.on('error', err => {
					// console.log('err: ', err);
				});

				// document.getElementById("callScreen").style.display = "block";

			})
			.catch(error => {
				// this.handleError(error);
			});
		});
	}

	setActiveScreen(n){
		this.activeScreen = n;
		if (this.platform.is('ios')) {
			setTimeout(()=>{
				cordova.plugins.iosrtc.refreshVideos();
			}, 500);
      	}
	}

	answerCall(){
		
			// (document.getElementsByClassName('ion-page')[0]).style.display = "none";


			
			this.incomingCallData.answer(this.myStream);
			let id;
			this.incomingCallData.on('error', (error) => {
				// // console.log(error);
			});


			// this.incomingCallData.on('close', () => {
			// 	this.disconnectCall();
			// });

			this.incomingCallData.on('stream', (stream) => {

				if(this.callStage == 3){
					// this.getCallLog();
					this.setCallLog(this.myUserId, 'received', new Date());
				}
				this.nativeAudio.stop('ringtone')
				.then(onSuccess => {}, onError => {});
				// this.callStartTime = new Date();
				this.callStage = 3;
				this.activeScreen = 1;
				this.callStartTime = new Date();
				if(this.timeIntStarted == 0){
					this.timeIntStarted = 1;
					this.timeInt = setInterval(()=>{
						this.getRemainingTime();
					}, 1000);
				}
				// // console.log('orderid is '+this.orderId);
				if (id != stream.id) {
					id = stream.id;
					this.remoteStream = stream;
					this.callerScreen.srcObject = this.remoteStream;
				}

				if (this.platform.is('ios')) {
					setTimeout(()=>{
						cordova.plugins.iosrtc.refreshVideos();
					}, 500);
		      	}
				
				setTimeout(()=>{
		            cordova.plugins.audioroute.overrideOutput('speaker', (success) => {}, (error) => {});
	          	}, 1000);
				// cordova.plugins.audioroute.overrideOutput('speaker', (success) => {}, (error) => {});
			});
		
	}



	receiverEnabled(){
		if(this.callStage == 0 ||this.callStage == 3 || this.callStage == 4){
			return;
		}
		this.outgoingCallData = this.peer.call('SamantaPJS'+this.other_user.id, this.myStream);
		this.callStage = 4;

		this.outgoingCallData.on('error', err => {
			// console.log('err: ', err);
		});
		
		this.outgoingCallData.on('stream', (instream) => {
			this.remoteStream = instream;
			this.callStage = 3;
			this.activeScreen = 1;
			this.callerScreen.srcObject = this.remoteStream;
			this.callStartTime = new Date();
			if(this.timeIntStarted == 0){
				this.timeIntStarted = 1;
				this.timeInt = setInterval(()=>{
					this.getRemainingTime();
				}, 1000);
			}
			if (this.platform.is('ios')) {
				setTimeout(()=>{
					cordova.plugins.iosrtc.refreshVideos();
				}, 500);
	      	}
			setTimeout(()=>{
	            cordova.plugins.audioroute.overrideOutput('speaker', (success) => {}, (error) => {});
          	}, 1000);
		});
	}

	switchAudio(){
		if(this.soundMode == 0){
			this.audioman.setVolume(AudioManagement.VolumeType.RING, 10)
		   	.then(() => {
		    	// console.log('Device audio mode is now RING');
		   	})
		   	.catch((reason) => {
	     		// console.log(reason);
		   	});
		   	this.soundMode = 1;
			// AudioToggle.setAudioMode(AudioToggle.SPEAKER);
		}
		else if(this.soundMode == 1){
			this.audioman.setVolume(AudioManagement.VolumeType.MUSIC, 10)
		   	.then(() => {
		    	// console.log('Device audio mode is now Music');
		   	})
		   	.catch((reason) => {
	     		// console.log(reason);
		   	});
		   	this.soundMode = 2;
			// AudioToggle.setAudioMode(AudioToggle.SPEAKER);
		}
		else if(this.soundMode == 2){
			this.audioman.setVolume(AudioManagement.VolumeType.NOTIFICATION, 10)
		   	.then(() => {
		    	// console.log('Device audio mode is now NOTIFICATION');
		   	})
		   	.catch((reason) => {
	     		// console.log(reason);
		   	});
		   	this.soundMode = 3;
			// AudioToggle.setAudioMode(AudioToggle.SPEAKER);
		}
		else if(this.soundMode == 3){
			this.audioman.setVolume(AudioManagement.VolumeType.SYSTEM, 10)
		   	.then(() => {
		    	// console.log('Device audio mode is now SYSTEM');
		   	})
		   	.catch((reason) => {
	     		// console.log(reason);
		   	});
		   	this.soundMode = 0;
			// AudioToggle.setAudioMode(AudioToggle.SPEAKER);
		}
		// else{
		// 	AudioToggle.setAudioMode(AudioToggle.EARPIECE);
		// }
	}

	getOrderDets(order_id){
		var data = {
	      	'order_id': order_id
	    };
	    // // console.log('called');
	    return this.api.getOrderDetails(data)
	    .then(resp => {
	    	this.order = resp.data.order;
	  //   	var plan_min = this.order.plan_time;
	  //   	var orderTime = new Date(this.order.date+" UTC");
			// orderTime.setMinutes( orderTime.getMinutes() + parseInt(plan_min) );
			// // console.log(orderTime);
			// this.endTime = new Date(this.order.to_time+" UTC");
			// clearInterval(this.timeInt);
			// this.timeInt = setInterval(()=>{
			// 	// this.getRemainingTime();
			// }, 1000);

	    })
	    .catch(err => {

	    });
	}



	// answerCall(){
	// 	this.call.answerCall();
	// }

	muteUnmuteAudio(){
	
		this.audio_muted = (this.audio_muted == 0)?1:0;

		if(this.myStream != null && this.myStream.getAudioTracks().length > 0){
	    	
	    	if(this.audio_muted == 0){
	    		this.myStream.getAudioTracks()[0].enabled = true;
	    	}
	    	else{
	    		this.myStream.getAudioTracks()[0].enabled = false;
	    	}
	  	}

	  	if (this.platform.is('ios')) {
            setTimeout(()=>{
				cordova.plugins.iosrtc.refreshVideos();
			}, 500);
      	}
	
		// this.call.muteAudio(this.audio_muted);
	
	}

	muteUnmuteVideo(){

		this.video_muted = (this.video_muted == 0)?1:0;
		// this.call.muteVideo(this.video_muted);
		if(this.myStream != null && this.myStream.getVideoTracks().length > 0){
	    	
	    	if(this.video_muted == 0){
	    		this.myStream.getVideoTracks()[0].enabled = true;
	    	}
	    	else{
	    		this.myStream.getVideoTracks()[0].enabled = false;
	    	}
	  	}

	  	if (this.platform.is('ios')) {
            setTimeout(()=>{
				cordova.plugins.iosrtc.refreshVideos();
			}, 500);
      	}
	
	}



	disconnectCall(send = 1){
		// this.call.close(close);
		this.insomnia.allowSleepAgain()
	  	.then(
		    () => // console.log('success'),
		    () => // console.log('error')
	  	);
		if(send == 1){
			// this.getCallLog();
			if(this.callStage == 2){
				this.setCallLog(this.myUserId, 'declined', new Date());
			}
			if(this.callStage == 1){
				this.setCallLog(this.myUserId, 'declined_before_connect', new Date());
			}
			if(this.callStage == 4){
				this.setCallLog(this.myUserId, 'declined_after_connect', new Date());
			}
			if(this.callStage == 3){
				this.setCallLog(this.myUserId, 'disconnected', new Date());
			}
			this.sendFireMsg('disconnect');
		}
		if(!(this.peer == undefined)){
			this.peer.destroy();
		}

		this.peer = undefined;

		if(this.incomingCallData){
			this.incomingCallData.close();
		}

		if(this.outgoingCallData){
			this.outgoingCallData.close();
		}

		if(this.myStream){
			this.myStream.getTracks().forEach(track => track.stop())
		}
		
		if(this.remoteStream && this.remoteStream.getTracks()){
			this.remoteStream.getTracks().forEach(track => track.stop())
		}
		if(this.callStage == 3){
			this.callStage = 0;
			this.router.navigate(['/summary/'+this.order.id]);
		}

		// ================================================
		// Reset Everything
		// ================================================
		clearInterval(this.timeInt);
		this.timeIntStarted = 0;
		this.callStage = 0;
		this.callExtendRequest = 0;
		this.callExtendRequested = 0;
		this.callExtendShown = 0;
		this.callExtended = 0;
		this.showCancel = 0;
		this.chatWin = 0;
		this.activeScreen = 2;
		this.newChat = 0;
		this.audio_muted = 0;
		this.video_muted = 0;
		this.callToEnd = null;
		var element:any = document.getElementsByClassName('ion-page')[0];
		element.style.display = "flex";
		var element1:any = document.getElementsByClassName('call-screen-wrap')[0];
		// .call-screen-wrap
		// element1.style.background = "#000";
		document.querySelector('#remText').innerHTML = "";
		document.querySelector('#remMin').innerHTML = "";
		document.querySelector('#remSec').innerHTML = "";
		document.querySelector('#remText1').innerHTML = "";
		document.querySelector('#remMin1').innerHTML = "";
		document.querySelector('#remSec1').innerHTML = "";
		document.querySelector('#remText2').innerHTML = "";
		document.querySelector('#remMin2').innerHTML = "";
		document.querySelector('#remSec2').innerHTML = "";
	}

	extend(val){
		this.callExtendRequest = 0;
		this.callExtendShown = 1;
		if(val == 0){
			this.callExtended = 0;
		}
		else{
			this.callExtended = 1;
			this.sendFireMsg('extension_requested');
			// this.call.extendCall();
		}
	}


	extendAllow(val){
		this.callExtendRequested = 0;
		if(val == 0){
			this.callExtended = 0;
			this.sendFireMsg('extension_denied');
		}
		else{
			this.callExtended = 1;
			this.sendFireMsg('extension_allowed');
		}
	}

	getChatData(){
		// this.orderId = orderId;
		// this.userId = userId;
		this.userDets = this.misc.getUserDets();
		this.chatMsgs = [];
		// // console.log('waiting for msgs for order '+orderId);
		this.itemRef = this.db.object('chat'+this.order.id);
		this.itemRef.snapshotChanges().subscribe(action => {
			// // console.log(action.payload.val());
			if(!(action.payload.val() == null)){
				this.chatMsgs = action.payload.val();
				if(!(this.chatMsgs == "")){
					this.chatMsgs = JSON.parse(this.chatMsgs);
				}
				else{
					this.chatMsgs = [];
				}
				if(this.chatWin == 0){
					this.newChat = 1;
				}
			}
		});
	}

	sendFireMsg(msg){
		var data = {
			'user_id' : this.other_user.id,
			'msg': msg,
			'order_id': this.order.id
		};
		this.api.sendFireMsg(data)
		.then(resp => {
			// // console.log(resp);
		})
		.catch(err => {
			// // console.log(err);
		})

	}

	receiveFireMsg(msg){
		// // console.log(msg);
		if(msg == 'disconnect'){
			this.disconnectCall(0);
		}
		if(msg == "extension_requested"){
			this.callExtendRequested = 1;
		}
		if(msg == "extension_allowed"){
			this.callExtended = 1;
			this.misc.showToast('Service provider allowed extension of call.');
		}
		if(msg == "extension_denied"){
			this.callExtended = 0;
			this.misc.showToast('Service provider denied extension of call.');
		}
	}

	sendMsg(){
		if(this.message == ""){
			this.misc.showToast('Please enter a message.');
			return;
		}

		var data = {
			"message": this.message,
			"from": this.myUserId
		};
		// // console.log(this.chatMsgs);
		this.chatMsgs.push(data);

		var apidata = JSON.stringify(this.chatMsgs);
		// this.origin = { lat:apidata.lat, lng:apidata.lon };
		const sendRef = this.db.object('chat'+this.order.id);
		sendRef.set(apidata);
		this.message = "";
	}

	// async getCallLog(){
	// 	this.callRef = this.db.object('call'+this.order.id);
	// 	// // console.log(this.callRef);
	// 	await this.callRef.snapshotChanges().subscribe(action => {
	// 		// console.log(action.payload.val());
	// 		if(!(action.payload.val() == null)){
	// 			this.callLog = action.payload.val();
	// 			if(!(this.callLog == "")){
	// 				this.callLog = JSON.parse(this.callLog);
	// 				// console.log('Hi');
	// 			}
	// 			else{
	// 				this.callLog = [];
	// 			}
	// 		}
	// 	});
	// }

	setCallLog(user_id, action, time){

		if(!(action == "init_call")){
			setTimeout( ()=> {
				var data = {
					'user_id': user_id,
					'action': action,
					'time': time,
					'order_id': this.order.id
				};
				this.api.sendCallLog(data)
				.then(resp => {

				})
				.catch(err => {

				});
			}, 1000);
		}
		else{
			var data = {
				'user_id': user_id,
				'action': action,
				'time': time,
				'order_id': this.order.id
			};
			this.api.sendCallLog(data)
			.then(resp => {
				// console.log(resp);
			})
			.catch(err => {

			});
		}
	}


	showAcceptToast(order_id){
		var data = {
			'order_id': order_id
		};
		this.api.getOrderDetails(data)
		.then(resp => {

			var data = resp.data.order;
			data['date'] = (new Date((data['date']+" UTC").replace(/-/g, '/'))).toISOString();
			this.bookingRequest = data;
		})
		.catch(err => {

		});
	}

	cancelOrder(order_id){
		var data = {
			cancel_type: 2,
			order_id: this.order.id
		};
		this.api.cancelOrder(data)
		.then(resp => {
			this.misc.showToast('Order Cancelled succesfully');
			this.disconnectCall();
			// this.getBookings();
			// this.router.navigate(['/summary/'+this.orderId]);
		})
		.catch(err => {
			// // console.log(err);
			this.misc.handleError(err);
		});
	}

	acceptOrder(order_id, status){
		var data = {
			'order_id': order_id,
			'status' : status
		};
		this.api.acceptOrder(data)
		.then(resp => {
			var order_date = new Date((resp.data.order.date + " UTC").replace(/-/g, "/"));
          	if(status == 1){
				var trigger_time = new Date(new Date(order_date).getTime() - 300000);  
				// console.log(trigger_time);
				this.localNotifications.schedule({
				   	title: "Upcoming order.",
				   	text: 'Thank you for using Samanta. Your client booking begins in five minutes. Please be online and prepared for the appointment.',
				   	trigger: {at: trigger_time},
				   	led: 'FF0000',
				   	sound: null
				});
			}
			this.bookingRequest = "";
			this.firebase.UserAcceptFn();
		})
		.catch(err => {

		});
	}
	getRemainingTime(){
			// console.log('get_remaining');
			// this.timeInt = setInterval(()=>{
			var endTime = new Date((this.order.to_time+" UTC").replace(/-/g, '/'));
			var total = endTime.getTime() - new Date().getTime();
			
			var timeNow = new Date().getTime() - this.callStartTime.getTime();
			var time_passed = timeNow/1000;
			if(time_passed > 60){
				this.showCancel = 0;
				
				// document.getElementById('callCancBtn').style.display = "none";
			}
			else{
				this.showCancel = 1;
				// document.getElementById('callCancBtn').style.display = "block";
			}

			if(total < 0 && this.callExtended == 0){
				clearInterval(this.timeInt);
				if(!(this.userDets.user_type == 3)){
					this.disconnectCall();
				}
			}
			else{
				if(!(this.callToEnd == null)){
					if(((new Date()).toISOString()) >= this.callToEnd){
						clearInterval(this.timeInt);
						this.disconnectCall();
					}
				}
				if(total < 0){
					var rem_text = "Extra Time";
					total = (new Date().getTime()) - (endTime.getTime());
				}
				else{
					var rem_text = "Remaining time";
				}
				var seconds:any = Math.floor( (total/1000) % 60 );
				var minutes:any = Math.floor( (total/1000/60) % 60 );
				var totalMinutes:any = Math.floor((total/1000/60));
				// // console.log(totalMinutes);
				// minUpdated = totalMinutes;
				// if((!(totalMinutes == this.minUpdated)) && (rem_text == "Extra Time") && this.order.user_id == this.myUserId ){
					
				// 	this.minUpdated = totalMinutes;
				// 	// console.log('mincurrent = '+totalMinutes+" updated_min = "+this.minUpdated+" rem text ="+rem_text);
					
				// 	this.api.extendCall(this.orderId)
				// 	.then(resp => {

				// 	})
				// 	.catch(err => {

				// 	});
				
				// }
				
				if(minutes < 2 && this.order.user_id == this.myUserId && this.callExtendShown == 0){
					this.callExtendRequest = 1;
				
				}
				if(minutes < 0){
				
					minutes = -(minutes);
				
				}
				if(seconds < 0){
				
					seconds = -(seconds);
				
				}

				if(minutes < 10){
					minutes = "0"+minutes;
				}

				if(seconds < 10){
					seconds = "0"+seconds;
				}

				this.rem_text = rem_text;
				this.minutes = minutes;
				this.seconds = seconds;
				
				document.querySelector('#remText').innerHTML = ""+rem_text;
				document.querySelector('#remMin').innerHTML = ""+minutes;
				document.querySelector('#remSec').innerHTML = ""+seconds;
				document.querySelector('#remText1').innerHTML = ""+rem_text;
				document.querySelector('#remMin1').innerHTML = ""+minutes;
				document.querySelector('#remSec1').innerHTML = ""+seconds;
				document.querySelector('#remText2').innerHTML = ""+rem_text;
				document.querySelector('#remMin2').innerHTML = ""+minutes;
				document.querySelector('#remSec2').innerHTML = ""+seconds;

			}

		// }, 1000);
	}





}